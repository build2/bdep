// -*- C++ -*-
//
// This file was generated by CLI, a command line interface
// compiler for C++.
//

#ifndef BDEP_PUBLISH_OPTIONS_HXX
#define BDEP_PUBLISH_OPTIONS_HXX

// Begin prologue.
//
//
// End prologue.

#include <set>

#include <bdep/project-options.hxx>

namespace bdep
{
  class cmd_publish_options: public ::bdep::project_options
  {
    public:
    cmd_publish_options ();

    // Return true if anything has been parsed.
    //
    bool
    parse (int& argc,
           char** argv,
           bool erase = false,
           ::bdep::cli::unknown_mode option = ::bdep::cli::unknown_mode::fail,
           ::bdep::cli::unknown_mode argument = ::bdep::cli::unknown_mode::stop);

    bool
    parse (int start,
           int& argc,
           char** argv,
           bool erase = false,
           ::bdep::cli::unknown_mode option = ::bdep::cli::unknown_mode::fail,
           ::bdep::cli::unknown_mode argument = ::bdep::cli::unknown_mode::stop);

    bool
    parse (int& argc,
           char** argv,
           int& end,
           bool erase = false,
           ::bdep::cli::unknown_mode option = ::bdep::cli::unknown_mode::fail,
           ::bdep::cli::unknown_mode argument = ::bdep::cli::unknown_mode::stop);

    bool
    parse (int start,
           int& argc,
           char** argv,
           int& end,
           bool erase = false,
           ::bdep::cli::unknown_mode option = ::bdep::cli::unknown_mode::fail,
           ::bdep::cli::unknown_mode argument = ::bdep::cli::unknown_mode::stop);

    bool
    parse (::bdep::cli::scanner&,
           ::bdep::cli::unknown_mode option = ::bdep::cli::unknown_mode::fail,
           ::bdep::cli::unknown_mode argument = ::bdep::cli::unknown_mode::stop);

    // Merge options from the specified instance appending/overriding
    // them as if they appeared after options in this instance.
    //
    void
    merge (const cmd_publish_options&);

    // Option accessors and modifiers.
    //
    const bool&
    yes () const;

    bool&
    yes ();

    void
    yes (const bool&);

    const string&
    control () const;

    string&
    control ();

    void
    control (const string&);

    bool
    control_specified () const;

    void
    control_specified (bool);

    const url&
    repository () const;

    url&
    repository ();

    void
    repository (const url&);

    bool
    repository_specified () const;

    void
    repository_specified (bool);

    const string&
    section () const;

    string&
    section ();

    void
    section (const string&);

    bool
    section_specified () const;

    void
    section_specified (bool);

    const string&
    author_name () const;

    string&
    author_name ();

    void
    author_name (const string&);

    bool
    author_name_specified () const;

    void
    author_name_specified (bool);

    const string&
    author_email () const;

    string&
    author_email ();

    void
    author_email (const string&);

    bool
    author_email_specified () const;

    void
    author_email_specified (bool);

    const std::set<string>&
    force () const;

    std::set<string>&
    force ();

    void
    force (const std::set<string>&);

    bool
    force_specified () const;

    void
    force_specified (bool);

    const string&
    simulate () const;

    string&
    simulate ();

    void
    simulate (const string&);

    bool
    simulate_specified () const;

    void
    simulate_specified (bool);

    const bool&
    forward () const;

    bool&
    forward ();

    void
    forward (const bool&);

    // Print usage information.
    //
    static ::bdep::cli::usage_para
    print_usage (::std::ostream&,
                 ::bdep::cli::usage_para = ::bdep::cli::usage_para::none);

    // Option description.
    //
    static const ::bdep::cli::options&
    description ();

    // Implementation details.
    //
    protected:
    friend struct _cli_cmd_publish_options_desc_type;

    static void
    fill (::bdep::cli::options&);

    bool
    _parse (const char*, ::bdep::cli::scanner&);

    private:
    bool
    _parse (::bdep::cli::scanner&,
            ::bdep::cli::unknown_mode option,
            ::bdep::cli::unknown_mode argument);

    public:
    bool yes_;
    string control_;
    bool control_specified_;
    url repository_;
    bool repository_specified_;
    string section_;
    bool section_specified_;
    string author_name_;
    bool author_name_specified_;
    string author_email_;
    bool author_email_specified_;
    std::set<string> force_;
    bool force_specified_;
    string simulate_;
    bool simulate_specified_;
    bool forward_;
  };
}

// Print page usage information.
//
namespace bdep
{
  ::bdep::cli::usage_para
  print_bdep_publish_usage (::std::ostream&,
                            ::bdep::cli::usage_para = ::bdep::cli::usage_para::none);
}

#include <bdep/publish-options.ixx>

// Begin epilogue.
//
//
// End epilogue.

#endif // BDEP_PUBLISH_OPTIONS_HXX
