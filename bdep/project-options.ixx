// -*- C++ -*-
//
// This file was generated by CLI, a command line interface
// compiler for C++.
//

// Begin prologue.
//
//
// End prologue.

namespace bdep
{
  // configuration_add_options
  //

  inline const string& configuration_add_options::
  type () const
  {
    return this->type_;
  }

  inline string& configuration_add_options::
  type ()
  {
    return this->type_;
  }

  inline void configuration_add_options::
  type (const string& x)
  {
    this->type_ = x;
  }

  inline bool configuration_add_options::
  type_specified () const
  {
    return this->type_specified_;
  }

  inline void configuration_add_options::
  type_specified (bool x)
  {
    this->type_specified_ = x;
  }

  inline const bool& configuration_add_options::
  default_ () const
  {
    return this->default__;
  }

  inline bool& configuration_add_options::
  default_ ()
  {
    return this->default__;
  }

  inline void configuration_add_options::
  default_ (const bool& x)
  {
    this->default__ = x;
  }

  inline const bool& configuration_add_options::
  no_default () const
  {
    return this->no_default_;
  }

  inline bool& configuration_add_options::
  no_default ()
  {
    return this->no_default_;
  }

  inline void configuration_add_options::
  no_default (const bool& x)
  {
    this->no_default_ = x;
  }

  inline const bool& configuration_add_options::
  forward () const
  {
    return this->forward_;
  }

  inline bool& configuration_add_options::
  forward ()
  {
    return this->forward_;
  }

  inline void configuration_add_options::
  forward (const bool& x)
  {
    this->forward_ = x;
  }

  inline const bool& configuration_add_options::
  no_forward () const
  {
    return this->no_forward_;
  }

  inline bool& configuration_add_options::
  no_forward ()
  {
    return this->no_forward_;
  }

  inline void configuration_add_options::
  no_forward (const bool& x)
  {
    this->no_forward_ = x;
  }

  inline const bool& configuration_add_options::
  auto_sync () const
  {
    return this->auto_sync_;
  }

  inline bool& configuration_add_options::
  auto_sync ()
  {
    return this->auto_sync_;
  }

  inline void configuration_add_options::
  auto_sync (const bool& x)
  {
    this->auto_sync_ = x;
  }

  inline const bool& configuration_add_options::
  no_auto_sync () const
  {
    return this->no_auto_sync_;
  }

  inline bool& configuration_add_options::
  no_auto_sync ()
  {
    return this->no_auto_sync_;
  }

  inline void configuration_add_options::
  no_auto_sync (const bool& x)
  {
    this->no_auto_sync_ = x;
  }

  inline const bool& configuration_add_options::
  existing () const
  {
    return this->existing_;
  }

  inline bool& configuration_add_options::
  existing ()
  {
    return this->existing_;
  }

  inline void configuration_add_options::
  existing (const bool& x)
  {
    this->existing_ = x;
  }

  inline const bool& configuration_add_options::
  wipe () const
  {
    return this->wipe_;
  }

  inline bool& configuration_add_options::
  wipe ()
  {
    return this->wipe_;
  }

  inline void configuration_add_options::
  wipe (const bool& x)
  {
    this->wipe_ = x;
  }

  // configuration_name_options
  //

  inline const vector<pair<string, size_t>>& configuration_name_options::
  config_name () const
  {
    return this->config_name_;
  }

  inline vector<pair<string, size_t>>& configuration_name_options::
  config_name ()
  {
    return this->config_name_;
  }

  inline void configuration_name_options::
  config_name (const vector<pair<string, size_t>>& x)
  {
    this->config_name_ = x;
  }

  inline bool configuration_name_options::
  config_name_specified () const
  {
    return this->config_name_specified_;
  }

  inline void configuration_name_options::
  config_name_specified (bool x)
  {
    this->config_name_specified_ = x;
  }

  inline const vector<pair<uint64_t, size_t>>& configuration_name_options::
  config_id () const
  {
    return this->config_id_;
  }

  inline vector<pair<uint64_t, size_t>>& configuration_name_options::
  config_id ()
  {
    return this->config_id_;
  }

  inline void configuration_name_options::
  config_id (const vector<pair<uint64_t, size_t>>& x)
  {
    this->config_id_ = x;
  }

  inline bool configuration_name_options::
  config_id_specified () const
  {
    return this->config_id_specified_;
  }

  inline void configuration_name_options::
  config_id_specified (bool x)
  {
    this->config_id_specified_ = x;
  }

  // project_options
  //

  inline const bool& project_options::
  all () const
  {
    return this->all_;
  }

  inline bool& project_options::
  all ()
  {
    return this->all_;
  }

  inline void project_options::
  all (const bool& x)
  {
    this->all_ = x;
  }

  inline const vector<pair<dir_path, size_t>>& project_options::
  config () const
  {
    return this->config_;
  }

  inline vector<pair<dir_path, size_t>>& project_options::
  config ()
  {
    return this->config_;
  }

  inline void project_options::
  config (const vector<pair<dir_path, size_t>>& x)
  {
    this->config_ = x;
  }

  inline bool project_options::
  config_specified () const
  {
    return this->config_specified_;
  }

  inline void project_options::
  config_specified (bool x)
  {
    this->config_specified_ = x;
  }

  inline const dir_paths& project_options::
  directory () const
  {
    return this->directory_;
  }

  inline dir_paths& project_options::
  directory ()
  {
    return this->directory_;
  }

  inline void project_options::
  directory (const dir_paths& x)
  {
    this->directory_ = x;
  }

  inline bool project_options::
  directory_specified () const
  {
    return this->directory_specified_;
  }

  inline void project_options::
  directory_specified (bool x)
  {
    this->directory_specified_ = x;
  }
}

// Begin epilogue.
//
//
// End epilogue.
